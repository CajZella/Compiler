declare i32 @getint()
declare void @putint(i32)
declare void @putstr(i8*)
declare void @putch(i32)
@str.0 = private unnamed_addr constant [10 x i8] c"20373184\0A\00"
@str.1 = private unnamed_addr constant [40 x i8] c"Wow, you will begin test your program!\0A\00"
define dso_local i32 @main() {
main_b0:
  %i1 = alloca i32
  store i32 1, i32* %i1
  %i2 = alloca i32
  store i32 -2, i32* %i2
  %i3 = alloca i32
  store i32 3, i32* %i3
  %i4 = alloca i32
  store i32 4, i32* %i4
  %i5 = alloca i32
  store i32 5, i32* %i5
  %i6 = alloca i32
  store i32 6, i32* %i6
  %i7 = alloca i32
  store i32 111, i32* %i7
  %i8 = alloca i32
  %i9 = add i32 123, 234
  store i32 %i9, i32* %i8
  %i10 = alloca i32
  %i11 = add i32 5, 3
  %i12 = mul i32 6, %i11
  %i13 = sub i32 %i12, 10
  store i32 %i13, i32* %i10
  %i14 = alloca i32
  %i15 = load i32, i32* %i7
  %i16 = load i32, i32* %i8
  %i17 = mul i32 %i16, 3
  %i18 = add i32 %i15, %i17
  store i32 %i18, i32* %i14
  %i19 = alloca i32
  %i20 = alloca i32
  %i21 = alloca i32
  %i22 = alloca i32
  %i23 = alloca i32
  %i24 = alloca i32
  %i25 = alloca i32
  %i26 = alloca i32
  %i27 = alloca i32
  %i28 = alloca i32
  %i29 = alloca i32
  %i30 = alloca i32
  %i31 = alloca i32
  %i32 = alloca i32
  %i33 = call i32 @getint()
  store i32 %i33, i32* %i19
  %i34 = call i32 @getint()
  store i32 %i34, i32* %i20
  %i35 = call i32 @getint()
  store i32 %i35, i32* %i21
  %i36 = call i32 @getint()
  store i32 %i36, i32* %i22
  %i37 = call i32 @getint()
  store i32 %i37, i32* %i23
  %i38 = call i32 @getint()
  store i32 %i38, i32* %i24
  %i39 = getelementptr [10 x i8], [10 x i8]* @str.0, i32 0, i32 0
  call void @putstr(i8* %i39)
  %i40 = getelementptr [40 x i8], [40 x i8]* @str.1, i32 0, i32 0
  call void @putstr(i8* %i40)
  %i41 = add i32 1, 2
  call void @putint(i32 %i41)
  call void @putch(i32 10)
  %i42 = load i32, i32* %i5
  %i43 = load i32, i32* %i6
  %i44 = mul i32 %i42, %i43
  call void @putint(i32 %i44)
  call void @putch(i32 10)
  %i45 = load i32, i32* %i1
  %i46 = load i32, i32* %i2
  %i47 = add i32 %i45, %i46
  %i48 = load i32, i32* %i3
  %i49 = mul i32 %i47, %i48
  store i32 %i49, i32* %i25
  %i50 = load i32, i32* %i8
  %i51 = load i32, i32* %i7
  %i52 = srem i32 %i50, %i51
  %i53 = load i32, i32* %i5
  %i54 = add i32 %i52, %i53
  store i32 %i54, i32* %i26
  %i55 = load i32, i32* %i14
  %i56 = load i32, i32* %i10
  %i57 = mul i32 %i55, %i56
  %i58 = load i32, i32* %i4
  %i59 = sub i32 %i57, %i58
  store i32 %i59, i32* %i27
  %i60 = load i32, i32* %i19
  %i61 = sdiv i32 %i60, 2
  %i62 = load i32, i32* %i6
  %i63 = mul i32 %i61, %i62
  store i32 %i63, i32* %i28
  %i64 = load i32, i32* %i20
  %i65 = load i32, i32* %i21
  %i66 = add i32 1, %i65
  %i67 = mul i32 %i64, %i66
  %i68 = srem i32 %i67, 3
  store i32 %i68, i32* %i29
  %i69 = load i32, i32* %i22
  %i70 = sub i32 0, %i69
  store i32 %i70, i32* %i30
  %i71 = load i32, i32* %i23
  %i72 = add i32 6, %i71
  store i32 %i72, i32* %i31
  %i73 = load i32, i32* %i10
  call void @putint(i32 %i73)
  call void @putch(i32 10)
  %i74 = load i32, i32* %i14
  call void @putint(i32 %i74)
  call void @putch(i32 10)
  %i75 = load i32, i32* %i25
  call void @putint(i32 %i75)
  call void @putch(i32 10)
  %i76 = load i32, i32* %i26
  call void @putint(i32 %i76)
  call void @putch(i32 10)
  %i77 = load i32, i32* %i27
  call void @putint(i32 %i77)
  call void @putch(i32 10)
  %i78 = load i32, i32* %i28
  call void @putint(i32 %i78)
  call void @putch(i32 10)
  %i79 = load i32, i32* %i29
  call void @putint(i32 %i79)
  call void @putch(i32 10)
  %i80 = load i32, i32* %i30
  %i81 = load i32, i32* %i31
  call void @putint(i32 %i80)
  call void @putch(i32 45)
  call void @putint(i32 %i81)
  call void @putch(i32 10)
  ret i32 0
}
