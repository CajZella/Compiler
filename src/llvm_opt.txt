declare i32 @getint()
declare void @putint(i32)
declare void @putstr(i8*)
declare void @putch(i32)
@normalConst1 = dso_local constant i32 10
@normalConst2 = dso_local constant i32 12
@normalConst3 = dso_local constant i32 13
@array1DConst1 = dso_local constant [3 x i32] [i32 1, i32 2, i32 3]
@array2DConst1 = dso_local constant [3 x [2 x i32]] [[2 x i32] [i32 1, i32 3], [2 x i32] [i32 3, i32 5], [2 x i32] [i32 5, i32 7]]
@normalVar1 = dso_local global i32 21
@normalVar2 = dso_local global i32 22
@normalVar3 = dso_local global i32 23
@array1DVar1 = dso_local global [4 x i32] [i32 1, i32 2, i32 3, i32 4]
@array2DVar1 = dso_local global [2 x [3 x i32]] zeroinitializer
@sum = dso_local global i32 0
@str.0 = private unnamed_addr constant [11 x i8] c" is even!\0A\00"
@str.1 = private unnamed_addr constant [10 x i8] c" is odd!\0A\00"
@str.2 = private unnamed_addr constant [11 x i8] c"All even!\0A\00"
@str.3 = private unnamed_addr constant [15 x i8] c"Contains odd! \00"
@str.4 = private unnamed_addr constant [16 x i8] c"array contains \00"
@str.5 = private unnamed_addr constant [15 x i8] c" even number!\0A\00"
@str.6 = private unnamed_addr constant [10 x i8] c"19373341\0A\00"
@str.7 = private unnamed_addr constant [5 x i8] c"m = \00"
@str.8 = private unnamed_addr constant [7 x i8] c", n = \00"
@str.9 = private unnamed_addr constant [8 x i8] c", mm = \00"
@str.10 = private unnamed_addr constant [8 x i8] c", nn = \00"
@str.11 = private unnamed_addr constant [19 x i8] c"max of mm and nn: \00"
@str.12 = private unnamed_addr constant [21 x i8] c"; min of mm and nn: \00"
@str.13 = private unnamed_addr constant [14 x i8] c"mainConst1 = \00"
@str.14 = private unnamed_addr constant [21 x i8] c"Sum of normalConst: \00"
@str.15 = private unnamed_addr constant [15 x i8] c"Sum of array: \00"
@str.16 = private unnamed_addr constant [15 x i8] c"sum of array: \00"
define dso_local void @outputInt(i32 %ar1) {
outputInt_b0:
  call void @putint(i32 %ar1)
  call void @putch(i32 10)
  ret void
}
define dso_local i32 @getArraySum(i32* %ar5, i32 %ar7) {
getArraySum_b4:
  br label %getArraySum_b11
getArraySum_b11:
  %p1 = phi i32 [ 0, %getArraySum_b4 ], [ %i22, %getArraySum_b12 ]
  %p0 = phi i32 [ 0, %getArraySum_b4 ], [ %i24, %getArraySum_b12 ]
  %i16 = icmp slt i32 %p0, %ar7
  br i1 %i16, label %getArraySum_b12, label %getArraySum_b13
getArraySum_b12:
  %i20 = getelementptr i32, i32* %ar5, i32 %p0
  %i21 = load i32, i32* %i20
  %i22 = add i32 %p1, %i21
  %i24 = add i32 %p0, 1
  br label %getArraySum_b11
getArraySum_b13:
  ret i32 %p1
}
define dso_local void @judgeEvenOdd(i32 %ar27) {
judgeEvenOdd_b26:
  %i33 = srem i32 %ar27, 2
  %i34 = icmp eq i32 %i33, 0
  br i1 %i34, label %judgeEvenOdd_b29, label %judgeEvenOdd_b31
judgeEvenOdd_b29:
  call void @putint(i32 %ar27)
  %i36 = getelementptr [11 x i8], [11 x i8]* @str.0, i32 0, i32 0
  call void @putstr(i8* %i36)
  br label %judgeEvenOdd_b30
judgeEvenOdd_b30:
  ret void
judgeEvenOdd_b31:
  call void @putint(i32 %ar27)
  %i38 = getelementptr [10 x i8], [10 x i8]* @str.1, i32 0, i32 0
  call void @putstr(i8* %i38)
  br label %judgeEvenOdd_b30
}
define dso_local void @judgeArrayAllEven([3 x i32]* %ar40, i32 %ar42) {
judgeArrayAllEven_b39:
  br label %judgeArrayAllEven_b48
judgeArrayAllEven_b48:
  %p11 = phi i32 [ 0, %judgeArrayAllEven_b39 ], [ %p9, %judgeArrayAllEven_b77 ]
  %p8 = phi i32 [ 0, %judgeArrayAllEven_b39 ], [ %p6, %judgeArrayAllEven_b77 ]
  %p5 = phi i32 [ 0, %judgeArrayAllEven_b39 ], [ %p4, %judgeArrayAllEven_b77 ]
  %p2 = phi i32 [ 0, %judgeArrayAllEven_b39 ], [ %i81, %judgeArrayAllEven_b77 ]
  %i53 = icmp slt i32 %p2, %ar42
  br i1 %i53, label %judgeArrayAllEven_b49, label %judgeArrayAllEven_b50
judgeArrayAllEven_b49:
  br label %judgeArrayAllEven_b54
judgeArrayAllEven_b50:
  %p10 = phi i32 [ %p11, %judgeArrayAllEven_b48 ], [ %p9, %judgeArrayAllEven_b76 ]
  %p7 = phi i32 [ %p8, %judgeArrayAllEven_b48 ], [ %p6, %judgeArrayAllEven_b76 ]
  %p3 = phi i32 [ %p5, %judgeArrayAllEven_b48 ], [ %p4, %judgeArrayAllEven_b76 ]
  %i86 = icmp eq i32 %p7, 0
  br i1 %i86, label %judgeArrayAllEven_b82, label %judgeArrayAllEven_b84
judgeArrayAllEven_b54:
  %p4 = phi i32 [ 0, %judgeArrayAllEven_b49 ], [ %i70, %judgeArrayAllEven_b59 ]
  %i58 = icmp slt i32 %p4, 3
  br i1 %i58, label %judgeArrayAllEven_b55, label %judgeArrayAllEven_b56
judgeArrayAllEven_b55:
  %i65 = getelementptr [3 x i32], [3 x i32]* %ar40, i32 %p2, i32 %p4
  %i66 = load i32, i32* %i65
  %i67 = srem i32 %i66, 2
  %i68 = icmp eq i32 %i67, 0
  br i1 %i68, label %judgeArrayAllEven_b59, label %judgeArrayAllEven_b61
judgeArrayAllEven_b56:
  %p9 = phi i32 [ %p11, %judgeArrayAllEven_b54 ], [ %i75, %judgeArrayAllEven_b61 ]
  %p6 = phi i32 [ %p8, %judgeArrayAllEven_b54 ], [ 1, %judgeArrayAllEven_b61 ]
  %i79 = icmp eq i32 %p6, 1
  br i1 %i79, label %judgeArrayAllEven_b76, label %judgeArrayAllEven_b77
judgeArrayAllEven_b59:
  %i70 = add i32 %p4, 1
  br label %judgeArrayAllEven_b54
judgeArrayAllEven_b61:
  %i74 = getelementptr [3 x i32], [3 x i32]* %ar40, i32 %p2, i32 %p4
  %i75 = load i32, i32* %i74
  br label %judgeArrayAllEven_b56
judgeArrayAllEven_b76:
  br label %judgeArrayAllEven_b50
judgeArrayAllEven_b77:
  %i81 = add i32 %p2, 1
  br label %judgeArrayAllEven_b48
judgeArrayAllEven_b82:
  %i87 = getelementptr [11 x i8], [11 x i8]* @str.2, i32 0, i32 0
  call void @putstr(i8* %i87)
  br label %judgeArrayAllEven_b83
judgeArrayAllEven_b83:
  ret void
judgeArrayAllEven_b84:
  %i89 = getelementptr [15 x i8], [15 x i8]* @str.3, i32 0, i32 0
  call void @putstr(i8* %i89)
  call void @putint(i32 %p10)
  call void @putch(i32 10)
  br label %judgeArrayAllEven_b83
}
define dso_local i32 @cntEvenNum(i32* %ar91, i32 %ar93) {
cntEvenNum_b90:
  br label %cntEvenNum_b97
cntEvenNum_b97:
  %p13 = phi i32 [ 0, %cntEvenNum_b90 ], [ %p13, %cntEvenNum_b104 ], [ %i115, %cntEvenNum_b105 ]
  %p12 = phi i32 [ 0, %cntEvenNum_b90 ], [ %i113, %cntEvenNum_b104 ], [ %i117, %cntEvenNum_b105 ]
  %i102 = sub i32 %ar93, 1
  %i103 = icmp sle i32 %p12, %i102
  br i1 %i103, label %cntEvenNum_b98, label %cntEvenNum_b99
cntEvenNum_b98:
  %i108 = getelementptr i32, i32* %ar91, i32 %p12
  %i109 = load i32, i32* %i108
  %i110 = srem i32 %i109, 2
  %i111 = icmp ne i32 %i110, 0
  br i1 %i111, label %cntEvenNum_b104, label %cntEvenNum_b105
cntEvenNum_b99:
  %i119 = getelementptr [16 x i8], [16 x i8]* @str.4, i32 0, i32 0
  call void @putstr(i8* %i119)
  call void @putint(i32 %p13)
  %i120 = getelementptr [15 x i8], [15 x i8]* @str.5, i32 0, i32 0
  call void @putstr(i8* %i120)
  ret i32 %p13
cntEvenNum_b104:
  %i113 = add i32 %p12, 1
  br label %cntEvenNum_b97
cntEvenNum_b105:
  %i115 = add i32 %p13, 1
  %i117 = add i32 %p12, 1
  br label %cntEvenNum_b97
}
define dso_local i32 @get2Max(i32 %ar123, i32 %ar125) {
get2Max_b122:
  %i134 = icmp sgt i32 %ar123, %ar125
  br i1 %i134, label %get2Max_b129, label %get2Max_b131
get2Max_b129:
  br label %get2Max_b130
get2Max_b130:
  %p14 = phi i32 [ %ar125, %get2Max_b131 ], [ %ar123, %get2Max_b129 ]
  ret i32 %p14
get2Max_b131:
  br label %get2Max_b130
}
define dso_local i32 @get2Min(i32 %ar139, i32 %ar141) {
get2Min_b138:
  %i150 = icmp sge i32 %ar139, %ar141
  br i1 %i150, label %get2Min_b145, label %get2Min_b147
get2Min_b145:
  br label %get2Min_b146
get2Min_b146:
  %p15 = phi i32 [ %ar141, %get2Min_b145 ], [ %ar139, %get2Min_b147 ]
  ret i32 %p15
get2Min_b147:
  br label %get2Min_b146
}
define dso_local i32 @main() {
main_b154:
  %i155 = getelementptr [10 x i8], [10 x i8]* @str.6, i32 0, i32 0
  call void @putstr(i8* %i155)
  %i159 = call i32 @getint()
  %i161 = call i32 @getint()
  %i163 = call i32 @getint()
  %i167 = call i32 @get2Max(i32 %i161, i32 %i163)
  %i171 = call i32 @get2Min(i32 %i161, i32 %i163)
  br label %main_b172
main_b172:
  %p18 = phi i32 [ 0, %main_b154 ], [ %i184, %main_b173 ]
  %i176 = icmp slt i32 %p18, 4
  br i1 %i176, label %main_b173, label %main_b174
main_b173:
  %i179 = mul i32 %p18, %p18
  %i180 = sdiv i32 %i179, 2
  %i182 = getelementptr [4 x i32], [4 x i32]* @array1DVar1, i32 0, i32 %p18
  store i32 %i180, i32* %i182
  %i184 = add i32 %p18, 1
  br label %main_b172
main_b174:
  %i186 = getelementptr [4 x i32], [4 x i32]* @array1DVar1, i32 0, i32 0
  %i187 = call i32 @getArraySum(i32* %i186, i32 4)
  %i192 = getelementptr [5 x i8], [5 x i8]* @str.7, i32 0, i32 0
  call void @putstr(i8* %i192)
  call void @putint(i32 %i187)
  %i193 = getelementptr [7 x i8], [7 x i8]* @str.8, i32 0, i32 0
  call void @putstr(i8* %i193)
  call void @putint(i32 %i159)
  %i194 = getelementptr [8 x i8], [8 x i8]* @str.9, i32 0, i32 0
  call void @putstr(i8* %i194)
  call void @putint(i32 %i161)
  %i195 = getelementptr [8 x i8], [8 x i8]* @str.10, i32 0, i32 0
  call void @putstr(i8* %i195)
  call void @putint(i32 %i163)
  call void @putch(i32 10)
  %i198 = getelementptr [19 x i8], [19 x i8]* @str.11, i32 0, i32 0
  call void @putstr(i8* %i198)
  call void @putint(i32 %i167)
  %i199 = getelementptr [21 x i8], [21 x i8]* @str.12, i32 0, i32 0
  call void @putstr(i8* %i199)
  call void @putint(i32 %i171)
  call void @putch(i32 10)
  %i202 = getelementptr [14 x i8], [14 x i8]* @str.13, i32 0, i32 0
  call void @putstr(i8* %i202)
  call void @putint(i32 10)
  call void @putch(i32 10)
  %i203 = load i32, i32* @normalConst1
  %i204 = load i32, i32* @normalConst2
  %i205 = add i32 %i203, %i204
  %i206 = load i32, i32* @normalConst3
  %i207 = add i32 %i205, %i206
  %i208 = getelementptr [21 x i8], [21 x i8]* @str.14, i32 0, i32 0
  call void @putstr(i8* %i208)
  call void @putint(i32 %i207)
  call void @putch(i32 10)
  call void @judgeEvenOdd(i32 %i159)
  %i211 = getelementptr [15 x i8], [15 x i8]* @str.15, i32 0, i32 0
  call void @putstr(i8* %i211)
  call void @putint(i32 %i187)
  call void @putch(i32 10)
  br label %main_b212
main_b212:
  %p21 = phi i32 [ 0, %main_b174 ], [ %p22, %main_b219 ]
  %p17 = phi i32 [ 0, %main_b174 ], [ %i238, %main_b219 ]
  %i216 = icmp slt i32 %p17, 2
  br i1 %i216, label %main_b213, label %main_b214
main_b213:
  br label %main_b217
main_b214:
  %i239 = load i32, i32* @sum
  %i240 = getelementptr [15 x i8], [15 x i8]* @str.16, i32 0, i32 0
  call void @putstr(i8* %i240)
  call void @putint(i32 %i239)
  call void @putch(i32 10)
  br label %main_b241
main_b217:
  %p22 = phi i32 [ 0, %main_b213 ], [ %i236, %main_b218 ]
  %i221 = icmp slt i32 %p22, 3
  br i1 %i221, label %main_b218, label %main_b219
main_b218:
  %i223 = mul i32 10, %p17
  %i225 = sub i32 %i223, %p22
  %i228 = getelementptr [2 x [3 x i32]], [2 x [3 x i32]]* @array2DVar1, i32 0, i32 %p17, i32 %p22
  store i32 %i225, i32* %i228
  %i229 = load i32, i32* @sum
  %i232 = getelementptr [2 x [3 x i32]], [2 x [3 x i32]]* @array2DVar1, i32 0, i32 %p17, i32 %p22
  %i233 = load i32, i32* %i232
  %i234 = add i32 %i229, %i233
  store i32 %i234, i32* @sum
  %i236 = add i32 %p22, 1
  br label %main_b217
main_b219:
  %i238 = add i32 %p17, 1
  br label %main_b212
main_b241:
  %p19 = phi i32 [ %p21, %main_b214 ], [ %p20, %main_b248 ]
  %p16 = phi i32 [ 0, %main_b214 ], [ %i264, %main_b248 ]
  %i245 = icmp slt i32 %p16, 2
  br i1 %i245, label %main_b242, label %main_b243
main_b242:
  br label %main_b246
main_b243:
  %i265 = getelementptr [4 x i32], [4 x i32]* @array1DVar1, i32 0, i32 0
  %i266 = call i32 @cntEvenNum(i32* %i265, i32 4)
  %i267 = getelementptr [2 x [3 x i32]], [2 x [3 x i32]]* @array2DVar1, i32 0, i32 0
  call void @judgeArrayAllEven([3 x i32]* %i267, i32 2)
  %i270 = icmp ne i32 0, 0
  br i1 %i270, label %main_b268, label %main_b269
main_b246:
  %p20 = phi i32 [ 0, %main_b242 ], [ %i262, %main_b247 ]
  %i250 = icmp slt i32 %p20, 3
  br i1 %i250, label %main_b247, label %main_b248
main_b247:
  %i252 = mul i32 4, %p16
  %i254 = mul i32 %i252, %p20
  %i255 = sdiv i32 %i254, 2
  %i256 = add i32 %i255, 4
  %i257 = sub i32 %i256, 2
  %i260 = getelementptr [2 x [3 x i32]], [2 x [3 x i32]]* @array2DVar1, i32 0, i32 %p16, i32 %p20
  store i32 %i257, i32* %i260
  %i262 = add i32 %p20, 1
  br label %main_b246
main_b248:
  %i264 = add i32 %p16, 1
  br label %main_b241
main_b268:
  %i271 = getelementptr [2 x [3 x i32]], [2 x [3 x i32]]* @array2DVar1, i32 0, i32 0, i32 0
  %i272 = load i32, i32* %i271
  call void @judgeEvenOdd(i32 %i272)
  br label %main_b269
main_b269:
  ret i32 0
}
